import { ChatInputCommandInteraction, GuildMember, MessageFlags } from 'discord.js';
import { lavalinkService } from '../../bot';
import logger from '../../utils/logger';

export default {
  data: {
    name: 'play',
    description: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫ –∏–ª–∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π',
    options: [
      {
        name: 'query',
        type: 3,
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç YouTube',
        required: false,
      },
    ],
  },
  async execute(interaction: ChatInputCommandInteraction) {
    try {
      if (!lavalinkService.isConnected()) {
        await interaction.reply({ content: '‚ùå Lavalink node –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', flags: MessageFlags.Ephemeral });
        return;
      }

      const query = interaction.options.getString('query');

      const member = interaction.member as GuildMember;

      if (!member.voice.channel) {
        await interaction.reply({ content: '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!', flags: MessageFlags.Ephemeral });
        return;
      }

      if (!query) {
        const player: any = lavalinkService.lavashark.players.get(interaction.guildId!);
        const current = player?.queue?.current;
        if (!player || !current) {
          await interaction.reply({ content: '–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.', flags: MessageFlags.Ephemeral });
          return;
        }
        await interaction.reply({ content: `üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **${current.title}**` });
        return;
      }

      let searchQuery = query;
      if (!/^https?:\/\//i.test(query)) {
        // –ï—Å–ª–∏ –Ω–µ —Å—Å—ã–ª–∫–∞, –∏—â–µ–º –Ω–∞ YouTube
        searchQuery = `ytsearch:${query}`;
      }


      const searchResult = await lavalinkService.lavashark.search(searchQuery).catch(() => null);

      if (!searchResult || !Array.isArray(searchResult.tracks) || searchResult.tracks.length === 0) {
        await interaction.reply({ content: '‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!', flags: MessageFlags.Ephemeral });
        return;
      }

      let player: any = lavalinkService.lavashark.players.get(interaction.guildId!);
      if (!player) {
        player = lavalinkService.lavashark.createPlayer({
          guildId: interaction.guildId!,
          voiceChannelId: member.voice.channel.id,
          selfDeaf: true,
        });
      }

      await player.connect();
      lavalinkService.clearLeave(interaction.guildId!);

      const wasEmpty = !player.playing && player.queue.tracks.length === 0;
      let message: string;

      if (searchResult.playlistInfo && searchResult.tracks.length > 1) {
        for (const t of searchResult.tracks) {
          player.queue.add(t);
        }
        if (!player.playing) {
          await player.play();
        }
        message = `‚ñ∂Ô∏è –î–æ–±–∞–≤–ª–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç: **${searchResult.playlistInfo.name}** (${searchResult.tracks.length} —Ç—Ä–µ–∫–æ–≤)`;
      } else {
        const track = searchResult.tracks[0];

        player.queue.add(track);

        if (!player.playing) {
          await player.play();
        }

        message = wasEmpty
          ? `‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É: **${track.title}**`
          : `‚ñ∂Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: **${track.title}**`;
      }

      await interaction.reply({ content: message });

    } catch (err: any) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã play:', err);
      if (interaction.replied) return;
      await interaction.reply({ content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫.', flags: MessageFlags.Ephemeral });
    }
  },
};
